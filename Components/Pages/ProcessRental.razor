@page "/process-rental"
@using VillageRentalManagementSystem.Services
@using VillageRentalManagementSystem.Models
@inject CustomerService customerService
@inject EquipmentService equipmentService
@inject RentalService rentalService
@inject NavigationManager navigationManager

<h3>Process New Rental</h3>

@if (!string.IsNullOrWhiteSpace(message))
{
    <div class="alert alert-info" role="alert">
        @message
    </div>
}

<div class="container">
    <div class="row gx-5">
        <!-- Left Column: Customer and Cart -->
        <div class="col-md-6">

            <!-- Customer Selection Section -->
            <h4>1. Find Customer</h4>
            <div class="card p-3 mb-4">
                <div class="d-grid">
                    <button class="btn btn-primary" @onclick="OpenCustomerModal">
                        <i class="bi bi-people-fill me-2"></i> Browse Customers
                    </button>
                </div>

                @if (selectedCustomer != null)
                {
                    <hr />
                    <h5>Selected Customer</h5>
                    <p>
                        <strong>Name:</strong> @selectedCustomer.FirstName @selectedCustomer.LastName<br />
                        <strong>Email:</strong> @selectedCustomer.Email
                    </p>
                    @if (selectedCustomer.IsBanned)
                    {
                        <div class="alert alert-danger"><strong>This customer is BANNED.</strong></div>
                    }
                }
            </div>

            <!-- Shopping Cart -->
            <h4>3. Shopping Cart</h4>
            <div class="card p-3">
                @if (shoppingCart.Any())
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Equipment</th>
                                <th>Return Date</th>
                                <th class="text-end">Cost</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in shoppingCart)
                            {
                                <tr>
                                    <td>@item.equipment.Name</td>
                                    <td>@item.ExpectedReturnDate.ToShortDateString()</td>
                                    <td class="text-end">@item.rentalCost.ToString("C")</td>
                                    <td class="text-center">
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFromCart(item)">X</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                    <h5 class="text-end">Total: @TotalCost.ToString("C")</h5>
                }
                else
                {
                    <p>Cart is empty.</p>
                }
                <hr />
                <div class="d-grid gap-2">
                    <button class="btn btn-success" @onclick="Checkout" disabled="@(!shoppingCart.Any() || selectedCustomer == null || selectedCustomer.IsBanned)">Create Rental</button>
                    <button class="btn btn-danger" @onclick="ClearCart" disabled="@(!shoppingCart.Any())">Clear Cart</button>
                </div>
            </div>
        </div>

        <!-- Right Column: Equipment Search -->
        <div class="col-md-6">
            <h4>2. Find Equipment</h4>
            <div class="card p-3">
                <div class="d-grid">
                    <button class="btn btn-primary" @onclick="OpenEquipmentModal">
                        <i class="bi bi-search me-2"></i> Browse Equipment
                    </button>
                </div>

                @if (foundEquipment != null)
                {
                    <hr />
                    <h5>Equipment to Add</h5>
                    <p>
                        <strong>Name:</strong> @foundEquipment.Name<br />
                        <strong>Daily Cost:</strong> @foundEquipment.DailyRentalCost.ToString("C")
                    </p>

                    <div class="row align-items-end">
                        <div class="col">
                            <label>Return Date:</label>
                            <input type="date" class="form-control" @bind="itemReturnDate" />
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-success" @onclick="AddToCart">Add to Cart</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Customer Selection Modal -->
@if (showCustomerModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Customer</h5>
                    <button type="button" class="btn-close" @onclick="CloseCustomerModal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control mb-3" placeholder="Search customers..." @oninput="FilterCustomers" />
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Status</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var customer in filteredCustomerList)
                            {
                                <tr>
                                    <td>@customer.FirstName @customer.LastName</td>
                                    <td>@customer.Email</td>
                                    <td>
                                        <span class="badge @(customer.IsBanned ? "bg-danger" : "bg-success")">
                                            @(customer.IsBanned ? "Banned" : "Active")
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => SelectCustomer(customer)">Select</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}


<!-- Equipment Selection Modal -->
@if (showEquipmentModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Available Equipment</h5>
                    <button type="button" class="btn-close" @onclick="CloseEquipmentModal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control mb-3" placeholder="Search available equipment..." @oninput="FilterEquipment" />
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Category</th>
                                <th class="text-end">Daily Cost</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var equipment in filteredEquipmentList)
                            {
                                <tr>
                                    <td>@equipment.Name</td>
                                    <td>@equipment.Category.Name</td>
                                    <td class="text-end">@equipment.DailyRentalCost.ToString("C")</td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => SelectEquipment(equipment)">Select</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}


@code {
    private Customer? selectedCustomer;
    private Equipment? foundEquipment;
    private List<RentalItem> shoppingCart = new();
    private string message = "";
    private DateTime itemReturnDate;
    private double TotalCost => shoppingCart.Sum(item => item.rentalCost);

    // For the customer modal
    private bool showCustomerModal = false;
    private List<Customer> allCustomers = new();
    private List<Customer> filteredCustomerList = new();
    private string customerSearchFilter = "";

    // For the equipment modal
    private bool showEquipmentModal = false;
    private List<Equipment> allAvailableEquipment = new();
    private List<Equipment> filteredEquipmentList = new();
    private string equipmentSearchFilter = "";

    protected override async Task OnInitializedAsync()
    {
        itemReturnDate = DateTime.Today.AddDays(1);
        allAvailableEquipment = await equipmentService.GetAllAvailableEquipmentAsync();
        filteredEquipmentList = allAvailableEquipment;
        allCustomers = await customerService.GetAllCustomersAsync();
        filteredCustomerList = allCustomers;
    }

    private void AddToCart()
    {
        if (selectedCustomer == null)
        {
            message = "Please select a customer first.";
            return;
        }
        if (selectedCustomer.IsBanned)
        {
            message = "Cannot rent to a banned customer.";
            return;
        }
        if (itemReturnDate.Date < DateTime.Today.Date)
        {
            message = "Return date cannot be in the past.";
            return;
        }

        if (foundEquipment != null && foundEquipment.IsAvailable)
        {
            var rentalDays = (itemReturnDate.Date - DateTime.Today.Date).TotalDays;
            if (rentalDays < 1) rentalDays = 1;

            var rentalItem = new RentalItem
            {
                equipment = foundEquipment,
                ExpectedReturnDate = itemReturnDate,
                rentalCost = foundEquipment.DailyRentalCost * rentalDays
            };

            shoppingCart.Add(rentalItem);
            message = $"{rentalItem.equipment.Name} added to cart!";
            foundEquipment = null; // Clear after adding
        }
    }

    // --- Customer Modal Methods ---
    private void OpenCustomerModal() => showCustomerModal = true;
    private void CloseCustomerModal() => showCustomerModal = false;

    private void SelectCustomer(Customer customer)
    {
        selectedCustomer = customer;
        CloseCustomerModal();
    }

    private void FilterCustomers(ChangeEventArgs e)
    {
        customerSearchFilter = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(customerSearchFilter))
        {
            filteredCustomerList = allCustomers;
        }
        else
        {
            filteredCustomerList = allCustomers
                .Where(c => (c.FirstName + " " + c.LastName).Contains(customerSearchFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    // --- Equipment Modal Methods ---
    private void OpenEquipmentModal() => showEquipmentModal = true;
    private void CloseEquipmentModal() => showEquipmentModal = false;

    private void SelectEquipment(Equipment equipment)
    {
        foundEquipment = equipment;
        CloseEquipmentModal();
    }

    private void FilterEquipment(ChangeEventArgs e)
    {
        equipmentSearchFilter = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(equipmentSearchFilter))
        {
            filteredEquipmentList = allAvailableEquipment;
        }
        else
        {
            filteredEquipmentList = allAvailableEquipment
                .Where(eq => eq.Name.Contains(equipmentSearchFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void RemoveFromCart(RentalItem itemToRemove)
    {
        shoppingCart.Remove(itemToRemove);
        message = $"{itemToRemove.equipment.Name} removed from cart.";
    }

    private void ClearCart()
    {
        shoppingCart.Clear();
        message = "Cart cleared.";
    }

    private async Task Checkout()
    {
        if (selectedCustomer == null || !shoppingCart.Any()) return;

        var newRental = new Rental
        {
            customer = selectedCustomer,
            items = shoppingCart,
            ExpectedReturnDate = shoppingCart.Max(item => item.ExpectedReturnDate)
        };

        bool success = await rentalService.CreateRentalAsync(newRental);

        if (success)
        {
            message = $"Rental #{newRental.Id} created successfully for {selectedCustomer.FirstName}.";
            await ResetPage();
        }
        else
        {
            message = "Error creating the rental. Please try again.";
        }
    }

    private async Task ResetPage()
    {
        selectedCustomer = null;
        foundEquipment = null;
        shoppingCart.Clear();

        // Refresh data that may have changed
        allAvailableEquipment = await equipmentService.GetAllAvailableEquipmentAsync();
        filteredEquipmentList = allAvailableEquipment;
        allCustomers = await customerService.GetAllCustomersAsync();
        filteredCustomerList = allCustomers;
    }
}
