@page "/process-rental"
@using VillageRentalManagementSystem.Services
@using VillageRentalManagementSystem.Models
@inject CustomerService customerService
@inject EquipmentService equipmentService
@inject RentalService rentalService
@inject NavigationManager navigationManager

<h3>Process New Rental</h3>

@if (!string.IsNullOrWhiteSpace(message))
{
    <div class="alert alert-info" role="alert">
        @message
    </div>
}

<div class="container">
    <div class="row gx-5">
        <!-- Left Column: Customer and Cart -->
        <div class="col-md-6">

            <!-- Customer Search -->
            <h4>1. Find Customer</h4>
            <div class="card p-3 mb-4">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Enter Customer ID or Name..." @bind="customerSearchTerm" />
                    <button class="btn btn-primary" @onclick="FindCustomer">Find</button>
                </div>

                @if (selectedCustomer != null)
                {
                    <hr />
                    <h5>Customer Details</h5>
                    <p>
                        <strong>Name:</strong> @selectedCustomer.FirstName @selectedCustomer.LastName<br />
                        <strong>Email:</strong> @selectedCustomer.Email
                    </p>
                    @if (selectedCustomer.IsBanned)
                    {
                        <div class="alert alert-danger"><strong>This customer is BANNED.</strong></div>
                    }
                }
            </div>

            <!-- Shopping Cart -->
            <h4>3. Shopping Cart</h4>
            <div class="card p-3">
                @if (shoppingCart.Any())
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Equipment</th>
                                <th>Return Date</th>
                                <th class="text-end">Cost</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in shoppingCart)
                            {
                                <tr>
                                    <td>@item.equipment.Name</td>
                                    <td>@item.ExpectedReturnDate.ToShortDateString()</td>
                                    <td class="text-end">@item.rentalCost.ToString("C")</td>
                                    <td class="text-center">
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFromCart(item)">X</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                    <h5 class="text-end">Total: @TotalCost.ToString("C")</h5>
                }
                else
                {
                    <p>Cart is empty.</p>
                }
                <hr />
                <div class="d-grid gap-2">
                    <button class="btn btn-success" @onclick="Checkout" disabled="@(!shoppingCart.Any() || selectedCustomer == null || selectedCustomer.IsBanned)">Create Rental</button>
                    <button class="btn btn-danger" @onclick="ClearCart" disabled="@(!shoppingCart.Any())">Clear Cart</button>
                </div>
            </div>
        </div>

        <!-- Right Column: Equipment Search -->
        <div class="col-md-6">
            <h4>2. Find Equipment</h4>
            <div class="card p-3">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Enter Equipment ID or Name..." @bind="equipmentSearchTerm" />
                    <button class="btn btn-primary" @onclick="FindEquipment">Find</button>
                </div>

                @if (foundEquipment != null)
                {
                    <hr />
                    <h5>Equipment Details</h5>
                    <p>
                        <strong>Name:</strong> @foundEquipment.Name<br />
                        <strong>Daily Cost:</strong> @foundEquipment.DailyRentalCost.ToString("C")
                    </p>

                    @if (foundEquipment.IsAvailable)
                    {
                        <div class="row align-items-end">
                            <div class="col">
                                <label>Return Date:</label>
                                <input type="date" class="form-control" @bind="itemReturnDate" />
                            </div>
                            <div class="col-auto">
                                <button class="btn btn-success" @onclick="AddToCart">Add to Cart</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">This item is currently unavailable.</div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Customer? selectedCustomer;
    private Equipment? foundEquipment;
    private List<RentalItem> shoppingCart = new();
    private string customerSearchTerm = "";
    private string equipmentSearchTerm = "";
    private string message = "";

    private DateTime itemReturnDate;

    private double TotalCost => shoppingCart.Sum(item => item.rentalCost);

    protected override void OnInitialized()
    {
        itemReturnDate = DateTime.Today.AddDays(1);
    }

    private async Task FindCustomer()
    {
        message = string.Empty;
        if (!string.IsNullOrWhiteSpace(customerSearchTerm))
        {
            selectedCustomer = await customerService.FindCustomerAsync(customerSearchTerm);
            if (selectedCustomer == null) message = "Customer not found.";
        }
    }

    private async Task FindEquipment()
    {
        message = string.Empty;
        if (!string.IsNullOrWhiteSpace(equipmentSearchTerm))
        {
            foundEquipment = await equipmentService.FindEquipmentAsync(equipmentSearchTerm);
            if (foundEquipment == null) message = "Equipment not found.";
        }
    }

    private void AddToCart()
    {
        if (selectedCustomer == null)
        {
            message = "Please select a customer first.";
            return;
        }
        if (selectedCustomer.IsBanned)
        {
            message = "Cannot rent to a banned customer.";
            return;
        }
        if (itemReturnDate.Date < DateTime.Today.Date)
        {
            message = "Return date cannot be in the past.";
            return;
        }

        if (foundEquipment != null && foundEquipment.IsAvailable)
        {
            var rentalDays = (itemReturnDate.Date - DateTime.Today.Date).TotalDays;
            if (rentalDays < 1) rentalDays = 1;

            var rentalItem = new RentalItem
            {
                equipment = foundEquipment,
                ExpectedReturnDate = itemReturnDate, // Corrected property name
                rentalCost = foundEquipment.DailyRentalCost * rentalDays
            };

            shoppingCart.Add(rentalItem);
            message = $"{rentalItem.equipment.Name} added to cart!";

            foundEquipment = null;
            equipmentSearchTerm = string.Empty;
        }
    }

    private void RemoveFromCart(RentalItem itemToRemove)
    {
        shoppingCart.Remove(itemToRemove);
        message = $"{itemToRemove.equipment.Name} removed from cart.";
    }

    private void ClearCart()
    {
        shoppingCart.Clear();
        message = "Cart cleared.";
    }

    private async Task Checkout()
    {
        if (selectedCustomer == null || !shoppingCart.Any()) return;

        var newRental = new Rental
        {
            customer = selectedCustomer,
            items = shoppingCart,
            ExpectedReturnDate = shoppingCart.Max(item => item.ExpectedReturnDate) 
        };

        bool success = await rentalService.CreateRentalAsync(newRental);

        if (success)
        {
            message = $"Rental #{newRental.Id} created successfully for {selectedCustomer.FirstName}.";
            ResetPage();
        }
        else
        {
            message = "Error creating the rental. Please try again.";
        }
    }

    private void ResetPage()
    {
        selectedCustomer = null;
        customerSearchTerm = string.Empty;
        foundEquipment = null;
        equipmentSearchTerm = string.Empty;
        shoppingCart.Clear();
    }
}
