@page "/customers"
@using System.Text.RegularExpressions
@using VillageRentalManagementSystem.Models
@using VillageRentalManagementSystem.Services
@using VillageRentalManagementSystem.Exceptions
@inject CustomerService customerService

<h3>Customer List</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success">@message</div>
}

<div class="container">
    <div class="row justify-content-end mb-3">
        <div class="col-4">
            <button class="btn btn-primary w-100" @onclick="ShowAddCustomerModal">
                <i class="bi bi-person-plus-fill me-2"></i>Add Customer
            </button>
        </div>
    </div>
    <table class="table table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Discount</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (customers.Any())
            {
                @foreach (var customer in customers)
                {
                    <tr>
                        <td>@customer.Id</td>
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.PhoneNumber</td>
                        <td>@customer.Email</td>
                        <td>@customer.DiscountRate %</td>
                        <td>
                            <span class="badge @(customer.IsBanned ? "bg-danger" : "bg-success")">
                                @(customer.IsBanned ? "Banned" : "Active")
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-secondary" @onclick="() => ShowEditCustomerModal(customer)">
                                <i class="bi bi-pencil-fill"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteCustomer(customer.Id)">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="8" class="text-center">No customers found.</td></tr>
            }
        </tbody>
    </table>
</div>

<!-- Add/Edit Modal -->
@if (showCustomerModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseCustomerModal"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(modalErrorMessage))
                    {
                        <div class="alert alert-danger">@modalErrorMessage</div>
                    }

                    <div class="mb-2">
                        <label>First Name</label>
                        <input class="form-control" @bind="modalCustomer.FirstName" />
                    </div>
                    <div class="mb-2">
                        <label>Last Name</label>
                        <input class="form-control" @bind="modalCustomer.LastName" />
                    </div>
                    <div class="mb-2">
                        <label>Phone</label>
                        <input class="form-control" @bind="modalCustomer.PhoneNumber" />
                    </div>
                    <div class="mb-2">
                        <label>Email</label>
                        <input class="form-control" @bind="modalCustomer.Email" />
                    </div>
                    <div class="mb-2">
                        <label>Discount Rate</label>
                        <input type="number" class="form-control" @bind="modalCustomer.DiscountRate" min="0" max="100" />
                    </div>
                    <div class="mb-2">
                        <label>Status</label>
                        <select class="form-select" @bind="modalCustomer.IsBanned">
                            <option value="false">Active</option>
                            <option value="true">Banned</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseCustomerModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveCustomer">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private List<Customer> customers = new();
    private Customer modalCustomer = new();
    private bool showCustomerModal = false;
    private string modalTitle = "";
    private string message = "";
    private bool isError = false;

    // --- NEW: Message for inside the modal ---
    private string modalErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        customers = await customerService.GetAllCustomersAsync();
    }

    private void ShowAddCustomerModal()
    {
        modalCustomer = new Customer();
        modalTitle = "Add New Customer";
        modalErrorMessage = ""; 
        showCustomerModal = true;
    }

    private void ShowEditCustomerModal(Customer customerToEdit)
    {
        modalCustomer = new Customer
        {
            Id = customerToEdit.Id,
            FirstName = customerToEdit.FirstName,
            LastName = customerToEdit.LastName,
            PhoneNumber = customerToEdit.PhoneNumber,
            Email = customerToEdit.Email,
            IsBanned = customerToEdit.IsBanned,
            DiscountRate = customerToEdit.DiscountRate
        };
        modalTitle = $"Edit Customer #{customerToEdit.Id}";
        modalErrorMessage = ""; 
        showCustomerModal = true;
    }

    private void CloseCustomerModal()
    {
        showCustomerModal = false;
    }

    private async Task SaveCustomer()
    {
        message = "";
        isError = false;
        modalErrorMessage = "";

        if (string.IsNullOrWhiteSpace(modalCustomer.FirstName) || string.IsNullOrWhiteSpace(modalCustomer.LastName))
        {
            modalErrorMessage = "First and Last name are required.";
            return;
        }

        var emailRegex = new Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$", RegexOptions.IgnoreCase);
        if (string.IsNullOrWhiteSpace(modalCustomer.Email) || !emailRegex.IsMatch(modalCustomer.Email))
        {
            modalErrorMessage = "Invalid email format. Please use a valid email address (e.g., user@example.com).";
            return;
        }

        var phoneRegex = new Regex(@"^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$");
        if (string.IsNullOrWhiteSpace(modalCustomer.PhoneNumber) || !phoneRegex.IsMatch(modalCustomer.PhoneNumber))
        {
            modalErrorMessage = "Invalid phone number format. Please use a valid 10-digit phone number (e.g., 555-555-5555).";
            return;
        }

        try
        {
            bool success;
            if (modalCustomer.Id == 0)
            {
                success = await customerService.AddCustomerAsync(modalCustomer);
                message = success ? "Customer added successfully." : "Failed to add customer.";
            }
            else
            {
                success = await customerService.UpdateCustomerAsync(modalCustomer);
                message = success ? "Customer updated successfully." : "Failed to update customer.";
            }

            if (success)
            {
                await LoadCustomers();
                CloseCustomerModal();
            }
            else
            {
                isError = true;
            }
        }
        catch (InvalidFormatException ex)
        {
            modalErrorMessage = ex.Message;
        }
        catch (Exception)
        {
            modalErrorMessage = "An unexpected error occurred. Please try again.";
        }
    }

    private async Task DeleteCustomer(int customerId)
    {
        bool success = await customerService.DeleteCustomerAsync(customerId);
        message = success ? "Customer deleted successfully." : "Failed to delete customer.";
        isError = !success;
        if (success)
        {
            await LoadCustomers();
        }
    }
}
